//===-- TriCoreISelDAGToDAG.cpp - A dag to dag inst selector for TriCore ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the TriCore target.
//
//===----------------------------------------------------------------------===//

#include "TriCoreAluCode.h"
#include "TriCoreMachineFunctionInfo.h"
#include "TriCoreRegisterInfo.h"
#include "TriCoreSubtarget.h"
#include "TriCoreTargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"
#include <iostream>

using namespace llvm;

#define DEBUG_TYPE "tricore-isel"
#define PASS_NAME "TriCore DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// TriCoreDAGToDAGISel - TriCore specific code to select TriCore machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

class TriCoreDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  TriCoreDAGToDAGISel() = delete;

  explicit TriCoreDAGToDAGISel(TriCoreTargetMachine &TargetMachine)
      : SelectionDAGISel(ID, TargetMachine) {}

  /// getI32Imm - Return a target constant with the specified value, of type
  /// i32.
  inline SDValue getI32Imm(unsigned Imm, const SDLoc &dl) {
    return CurDAG->getTargetConstant(Imm, dl, MVT::i32);
  }
  
  /// getI16Imm - Return a target constant with the specified value, of type
  /// i16.
  inline SDValue getI16Imm(unsigned Imm, const SDLoc &dl) {
    return CurDAG->getTargetConstant(Imm, dl, MVT::i16);
  }

private:
// Include the pieces autogenerated from the target description.
#include "TriCoreGenDAGISel.inc"

  // Instruction Selection not handled by the auto-generated tablgen
  void Select(SDNode *N) override;
};

} // namespace

char TriCoreDAGToDAGISel::ID = 0;

INITIALIZE_PASS(TriCoreDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

// Select instructions not customized! Used for
// expanded, promoted and normal instructions
void TriCoreDAGToDAGISel::Select(SDNode *Node) {
  SelectCode(Node);
}

FunctionPass *llvm::createTriCoreISelDag(TriCoreTargetMachine &TM) {
  return new TriCoreDAGToDAGISel(TM);
}
