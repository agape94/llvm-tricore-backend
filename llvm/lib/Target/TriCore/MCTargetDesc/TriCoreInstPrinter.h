//= TriCoreInstPrinter.h - Convert TriCore MCInst to asm syntax -------*- C++ -*--//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a TriCore MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TRICORE_MCTARGETDESC_TRICOREINSTPRINTER_H
#define LLVM_LIB_TARGET_TRICORE_MCTARGETDESC_TRICOREINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
class StringRef;

class TriCoreInstPrinter : public MCInstPrinter {
public:
  TriCoreInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                   const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                    const char *Modifier = nullptr);
  static const char *getRegisterName(MCRegister Reg);
  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS);

  template <unsigned bits>
    void printSExtImm(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  template <unsigned bits>
  void printZExtImm(const MCInst *MI, int OpNo, raw_ostream &O);
  void printPCRelImmOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printPairAddrRegsOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printAddrBO(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printAddrPreIncBO(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printAddrPostIncBO(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printAddrCircBO(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printAddrBitRevBO(const MCInst *MI, unsigned OpNum, raw_ostream &O);
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_TRICORE_MCTARGETDESC_TRICOREINSTPRINTER_H
